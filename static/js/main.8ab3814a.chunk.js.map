{"version":3,"sources":["components/ExternalLink.jsx","selectors/item.js","constants/actionTypes.js","actions/item.js","components/NameSearch.jsx","components/QualityFilter.jsx","constants/config.js","components/Price.jsx","components/Trend.jsx","components/config.js","components/Items.jsx","components/ItemsChart.jsx","components/App.jsx","reducers/item.js","actions/notification.js","constants/api.js","sagas/item.js","sagas/notification.js","sagas/index.js","store/index.js","serviceWorker.js","index.jsx"],"names":["ExternalLink","_ref","href","children","react_default","a","createElement","target","rel","getVisibleItems","property","min","max","items","nameSearch","qualityRangeStart","qualityRangeEnd","Object","values","filter","_len","arguments","length","filters","Array","_key","subject","every","all","query","searchQuery","toLowerCase","includes","propertySearchFilter","ITEMS_POLL_START","ITEMS_POLL_STOP","ITEMS_FETCH","ITEMS_FETCH_ERROR","ITEMS_SET","ITEMS_NAME_SEARCH","ITEMS_QUALITY_FILTER","NOTIFICATION","doSetItems","type","doFetchItems","doFetchItemError","error","connect","state","value","dispatch","onChange","doNameSearch","input","placeholder","prefix","icon","style","color","suffix","onClick","e","stopPropagation","marksObject","marks","concat","toConsumableArray","reduce","acc","objectSpread","defineProperty","Fragment","_ref2","quality","qualityMin","qualityMax","rangeStart","rangeEnd","range","meta","debounce","time","apply","slider","assign","defaultValue","Info","styled","span","_templateObject","Price","tooltip","title","formatNumber","fractionDigits","symbols","grouping","humanFormat","decimals","separator","colors","up","down","stable","icons","Trend","trend","getTrend","defaultProps","typeLabels","STANDARD","CONJURED","BACKSTAGE_PASS","LEGENDARY","typeColors","Column","Table","sellInFilters","Infinity","types","keys","Highlight","em","Items_templateObject","FilterContainer","div","_templateObject2","loading","fetchingItems","fetchedItemsOnce","emptyText","fetchItemsError","table","dataSource","locale","pagination","rowKey","components_NameSearch","key","dataIndex","render","text","main_default","searchWords","textToHighlight","highlightTag","autoEscape","sorter","b","name","localeCompare","align","sellIn","_ref3","sellInTrend","components_Price","components_Trend","marginLeft","map","_ref4","_ref5","slicedToArray","onFilter","_ref6","_value$split","split","_value$split2","_ref7","qualityTrend","progress","percent","format","width","filterDropdown","components_QualityFilter","indexOf","entries","_ref8","_ref9","_ref10","ChartContainerOuter","ItemsChart_templateObject","ChartContainerInner","ItemsChart_templateObject2","itemsData","data","fill","push","x","y","ResponsiveContainer","height","ScatterChart","minWidth","minHeight","YAxis","dataKey","unit","XAxis","CartesianGrid","strokeDasharray","Tooltip","cursor","Legend","props","Scatter","authorLink","components_ExternalLink","employerLink","Layout","App_templateObject","containerStyles","rubbonStyles","Header","App_templateObject2","HeaderContent","_templateObject3","Content","_templateObject4","Footer","_templateObject5","App","components_Items","components_ItemsChart","INITIAL_STATE","doNotification","message","description","API_URL_ITEMS","process","handleFetchItems","handlePollItems","watchPollItemsStart","itemsSaga","mergeItems","prevItems","item","nextItems","added","removed","updated","prevItem","id","fetchItems","_fetchItems","this","_callee","response","regenerator_default","wrap","_context5","prev","next","fetch","sent","abrupt","json","stop","_mergeItems","_mergeItems2","_context","call","select","put","t0","_marked","ms","_context2","delay","_marked2","action","_context3","take","race","_marked3","_context4","takeEvery","_marked4","handleNotification","notificationsSaga","notify","notification","open","notification_marked","notification_marked2","rootSaga","sagas_marked","createDebounceMiddleware","saga","createSagaMiddleware","store","createStore","undefined","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","es","components_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ab3814a.chunk.js","sourcesContent":["import React from 'react';\nimport { string, node } from 'prop-types';\n\n/**\n * Render a link to an external web page.\n *\n * @param {Object} props - React component properties.\n * @param {string} props.href - Href attribute.\n * @param {*} props.children - Child nodes.\n * @returns {React.Element} The rendered <a> element.\n */\nconst ExternalLink = ({ href, children }) => (\n  <a href={href} target=\"_blank\" rel=\"nofollow noopener noreferrer\">\n    {children}\n  </a>\n);\n\nExternalLink.propTypes = {\n  href: string.isRequired,\n  children: node.isRequired,\n};\n\nexport default ExternalLink;\n","/**\n * Get a function that filters objects having a string property matching a given search query.\n *\n * @param {string} property - Property in the subject object.\n * @param {string} query - Text to search.\n * @returns {Function} - A function of the type: `(subject: Object) => boolean`, that returns `true`\n * if `subject[property]` contains `query`, or `false` otherwise.\n */\nexport function propertySearchFilter(property, query) {\n  const searchQuery = query.toLowerCase();\n  return subject => subject[property].toLowerCase().includes(searchQuery);\n}\n\n/**\n * Get a function that filters objects having a number property within a given min/max range.\n *\n * @param {string} property - Property in the subject object.\n * @param {number} min - Minimum value.\n * @param {number} max - Maximum value.\n * @returns {Function} - A function of the type: `(subject: Object) => boolean`, that returns\n * `false` if `subject[property]` is lower than `min` or higher than `max`. Otherwise returns\n * `true`.\n */\nexport function propertyMinMaxFilter(property, min, max) {\n  return subject => subject[property] >= min && subject[property] <= max;\n}\n\n/**\n * Get a function that combine filters.\n *\n * @param {Function} filters - Filter functions of the type: `(subject: Object) => boolean`.\n * @returns {Function} - A function of the type: `(subject: Object) => boolean`, that returns `true`\n * if ALL filters return `true`, `false` if ANY of the filters returns `false`.\n */\nexport function all(...filters) {\n  return subject => filters.every(filter => filter(subject));\n}\n\n/**\n * Return all visible items.\n *\n * Right now all items are visible, so we just return all of them.\n *\n * @param {Object} state - Redux state.\n * @returns {module:sagas/item.Item[]} All visible items.\n */\nexport function getVisibleItems({\n  items,\n  nameSearch,\n  qualityRangeStart,\n  qualityRangeEnd,\n}) {\n  return Object.values(items).filter(\n    all(\n      propertySearchFilter('name', nameSearch),\n      propertyMinMaxFilter('quality', qualityRangeStart, qualityRangeEnd),\n    ),\n  );\n}\n","export const ITEMS_POLL_START = 'ITEMS_POLL_START';\nexport const ITEMS_POLL_STOP = 'ITEMS_POLL_STOP';\nexport const ITEMS_FETCH = 'ITEMS_FETCH';\nexport const ITEMS_FETCH_ERROR = 'ITEMS_FETCH_ERROR';\nexport const ITEMS_SET = 'ITEMS_SET';\nexport const ITEMS_NAME_SEARCH = 'ITEMS_NAME_SEARCH';\nexport const ITEMS_QUALITY_FILTER = 'ITEMS_QUALITY_FILTER';\nexport const NOTIFICATION = 'NOTIFICATION';\n","import {\n  ITEMS_POLL_START,\n  ITEMS_POLL_STOP,\n  ITEMS_FETCH,\n  ITEMS_FETCH_ERROR,\n  ITEMS_SET,\n  ITEMS_NAME_SEARCH,\n  ITEMS_QUALITY_FILTER,\n} from '../constants/actionTypes';\nimport {\n  ITEMS_POLL_DELAY,\n  ITEMS_SLIDER_FILTER_DEBOUNCE,\n} from '../constants/config';\n\n/**\n * Create an action to start polling items every ITEMS_POLL_DELAY ms, until a ITEMS_POLL_STOP action\n * is triggered.\n *\n * @returns {Object} An action that consists in starting polling items.\n */\nexport const doStartPollingItems = () => ({\n  type: ITEMS_POLL_START,\n  delay: ITEMS_POLL_DELAY,\n});\n\n/**\n * Create an action to stop polling items.\n *\n * @returns {Object} An action that consists in stopping polling items.\n */\nexport const doStopPollingItems = () => ({\n  type: ITEMS_POLL_STOP,\n});\n\n/**\n * Create an action to add items.\n *\n * @param {module:sagas/item.Item[]} items - Items to add.\n * @returns {Object} An action that consists in adding the given items.\n */\nexport const doSetItems = items => ({\n  type: ITEMS_SET,\n  items,\n});\n\n/**\n * Create an action to fetch items.\n *\n * @returns {Object} An action that consists in fetching items.\n */\nexport const doFetchItems = () => ({\n  type: ITEMS_FETCH,\n});\n\n/**\n * Create an action to handle an items fetch error.\n *\n * @param {Error} error - Error thrown during fetch.\n * @returns {Object} An action that consists in hnadling items fetch error.\n */\nexport const doFetchItemError = error => ({\n  type: ITEMS_FETCH_ERROR,\n  error,\n});\n\n/**\n * Create an action to update name search filter.\n *\n * @param {string} query - The new name search query.\n * @returns {Object} An action that consists in updating the name filter.\n */\nexport const doNameSearch = query => ({\n  type: ITEMS_NAME_SEARCH,\n  query,\n});\n\n/**\n * Create an action to update the quality min/max filter.\n *\n * @param {number} rangeStart - Minimum quality to display.\n * @param {number} rangeEnd - Maximum quality to display.\n * @returns {Object} An action that consists in updating the quality filter.\n */\nexport const doQualityFilter = (rangeStart, rangeEnd) => ({\n  type: ITEMS_QUALITY_FILTER,\n  rangeStart,\n  rangeEnd,\n  meta: {\n    debounce: {\n      time: ITEMS_SLIDER_FILTER_DEBOUNCE,\n    },\n  },\n});\n","import React from 'react';\nimport { string, func } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Input, Icon } from 'antd';\nimport { doNameSearch } from '../actions/item';\n\n/**\n * Name search input.\n *\n * @param {Object} props - React component properties.\n * @param {string} props.value - Current search value.\n * @param {func} props.onChange - Function to call when.\n * @returns {React.Element} - Rendered React element.\n */\nexport const NameSearch = ({ value, onChange }) => (\n  <Input\n    placeholder=\"Name\"\n    value={value}\n    prefix={\n      <Icon\n        type=\"search\"\n        style={{ color: value === '' ? 'rgba(0,0,0,.25)' : '#1890ff' }}\n      />\n    }\n    suffix={\n      value === '' ? null : (\n        <Icon\n          type=\"close\"\n          style={{ color: 'rgba(0,0,0,.25)' }}\n          onClick={() => onChange('')}\n        />\n      )\n    }\n    onClick={\n      e => e.stopPropagation() /* prevent toggling name column order on click */\n    }\n    onChange={e => onChange(e.target.value)}\n  />\n);\n\nNameSearch.propTypes = {\n  value: string.isRequired,\n  onChange: func.isRequired,\n};\n\n/**\n * Map Redux state to <NameSearch> properties.\n *\n * @param {module:sagas/item.Item[]} state - Redux state.\n * @returns {Object} Properties for <NameSearch> component.\n */\nconst mapStateToProps = state => ({\n  value: state.nameSearch,\n});\n\n/**\n * Map Redux state to <NameSearch> properties.\n *\n * @param {Function} dispatch - Redux action dispatcher.\n * @returns {Object} Properties for <NameSearch> component.\n */\nconst mapDispatchToProps = dispatch => ({\n  onChange: query => dispatch(doNameSearch(query)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NameSearch);\n","import React from 'react';\nimport { number, func, arrayOf } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Slider } from 'antd';\nimport { doQualityFilter } from '../actions/item';\n\n/**\n * Create a `marks` object for Ant Design `<Slider>` component's `marks` property. Set a label for\n * `min` and `max` value, and set an empty React node for every other value.\n *\n * @example\n *\n * marksObject(0, 100, [10, 20, 30]);\n * // => {\n * //   0: '0',\n * //   10: <></>,\n * //   20: <></>,\n * //   30: <></>,\n * //   100: '100',\n * // }\n *\n * @param {number} min - Minimum value.\n * @param {number} max - Maximum value.\n * @param {number[]} marks - Un-labelled additional marks.\n * @returns {Object} An object compatible with `<Slider>` component's `marks` property.\n * @see Ant Design Slider API: https://ant.design/components/slider/\n */\nfunction marksObject(min, max, marks) {\n  return [min, ...marks, max].reduce(\n    (acc, value) => ({\n      ...acc,\n      [value]: value === min || value === max ? `${value}` : <></>, // Display label only for min & max\n    }),\n    {},\n  );\n}\n\n/**\n * Quality min/max filter slider.\n *\n * @param {Object} props - React component properties.\n * @param {number} props.min - Minimum slider value.\n * @param {number} props.max - Maximum slider value.\n * @param {number[]} props.marks - Informational marks to display.\n * @param {number} props.rangeStart - Selected range start value.\n * @param {number} props.rangeEnd - Selected range end value.\n * @param {func} props.onChange - Function of the type:\n * `(rangeStart: number, rangeEnd: number) => *`, called when range changes.\n * @returns {React.Element} - Rendered React element.\n */\nexport const QualityFilter = ({\n  min,\n  max,\n  marks,\n  rangeStart,\n  rangeEnd,\n  onChange,\n}) => (\n  <Slider\n    range\n    defaultValue={[rangeStart, rangeEnd]}\n    marks={marksObject(min, max, marks)}\n    {...{ min, max, onChange }}\n  />\n);\n\nQualityFilter.propTypes = {\n  min: number.isRequired,\n  max: number.isRequired,\n  marks: arrayOf(number).isRequired,\n  rangeStart: number.isRequired,\n  rangeEnd: number.isRequired,\n  onChange: func.isRequired,\n};\n\n/**\n * Map Redux state to <QualityFilter> properties.\n *\n * @param {module:sagas/item.Item[]} state - Redux state.\n * @returns {Object} Properties for <QualityFilter> component.\n */\nconst mapStateToProps = state => ({\n  marks: Object.values(state.items).reduce(\n    (acc, { quality }) => (quality in acc ? acc : [...acc, quality]),\n    [],\n  ),\n  min: state.qualityMin,\n  max: state.qualityMax,\n  rangeStart: state.qualityRangeStart,\n  rangeEnd: state.qualityRangeEnd,\n});\n\n/**\n * Map Redux state to <QualityFilter> properties.\n *\n * @param {Function} dispatch - Redux action dispatcher.\n * @returns {Object} Properties for <QualityFilter> component.\n */\nconst mapDispatchToProps = dispatch => ({\n  onChange: range => dispatch(doQualityFilter(...range)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(QualityFilter);\n","/**\n * Delay in milliseconds between two items updates.\n *\n * @type {Number}\n */\nexport const ITEMS_POLL_DELAY = 5000;\n\n/**\n * Filter sliders debounce time in milliseconds. Debouncing prevents too many filtering actions to\n * occur while using the slider.\n *\n * @type {Number}\n */\nexport const ITEMS_SLIDER_FILTER_DEBOUNCE = 200;\n","import React from 'react';\nimport { number } from 'prop-types';\nimport { Tooltip } from 'antd';\nimport styled from 'styled-components';\nimport humanFormat from 'human-format';\nimport formatNumber from 'simple-format-number';\n\nconst Info = styled.span`\n  border-bottom: 1px dotted;\n  cursor: help;\n`;\n\n/**\n * Display a price and an indicator about its trend.\n *\n * @param {Object} props - React component properties.\n * @param {number} props.value - Price value.\n * @returns {React.Element} The rendered element.\n */\nconst Price = ({ value }) => {\n  if (value < 1000) {\n    return value;\n  }\n\n  return (\n    <Tooltip\n      title={formatNumber(value, {\n        fractionDigits: 0,\n        symbols: { grouping: ' ' },\n      })}\n    >\n      <Info>{humanFormat(value, { decimals: 1, separator: '' })}</Info>\n    </Tooltip>\n  );\n};\n\nPrice.propTypes = {\n  value: number.isRequired,\n};\n\nexport default Price;\n","import React from 'react';\nimport { number, object } from 'prop-types';\nimport { Icon } from 'antd';\n\nconst colors = {\n  up: '#52c41a',\n  down: '#f5222d',\n  stable: '#bfbfbf',\n};\n\nconst icons = {\n  up: 'caret-up',\n  down: 'caret-down',\n  stable: 'minus',\n};\n\n/**\n * Get the trend key from a value.\n *\n * @param {number} value - A number.\n * @returns {string} One of: 'stable' (0), 'down' (<0) or 'up' (>0).\n */\nfunction getTrend(value) {\n  if (value === 0) {\n    return 'stable';\n  }\n  return value < 0 ? 'down' : 'up';\n}\n\n/**\n * Display a price and an indicator about its trend.\n *\n * @param {Object} props - React component properties.\n * @param {number} props.value - Trend value.\n * @param {Object} props.style - Additional style.\n * @returns {React.Element} The rendered element.\n */\nconst Trend = ({ value, style }) => {\n  const trend = getTrend(value);\n  return (\n    <Icon type={icons[trend]} style={{ ...style, color: colors[trend] }} />\n  );\n};\n\nTrend.propTypes = {\n  value: number.isRequired,\n  style: object, // eslint-disable-line react/forbid-prop-types\n};\n\nTrend.defaultProps = {\n  style: null,\n};\n\nexport default Trend;\n","export const typeLabels = {\n  STANDARD: 'Standard',\n  CONJURED: 'Conjured',\n  BACKSTAGE_PASS: 'Backstage pass',\n  LEGENDARY: 'Legendary',\n};\n\nexport const typeColors = {\n  STANDARD: '#000',\n  CONJURED: '#52c41a',\n  BACKSTAGE_PASS: '#1890ff',\n  LEGENDARY: '#ff7a45',\n};\n","import React from 'react';\nimport { bool, string, number, arrayOf, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Progress, Table } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport styled from 'styled-components';\nimport { getVisibleItems } from '../selectors/item';\nimport ConnectedNameSearch from './NameSearch';\nimport ConnectedQualityFilter from './QualityFilter';\nimport Price from './Price';\nimport Trend from './Trend';\nimport { typeColors, typeLabels } from './config';\n\nconst { Column } = Table;\n\nconst sellInFilters = [[0, 2], [2, 5], [5, 10], [10, 20], [20, +Infinity]];\n\nconst types = Object.keys(typeColors);\n\nconst progressWidth = 48;\n\nconst Highlight = styled.em`\n  font-style: normal;\n  background: #ffc069;\n`;\n\n// TODO Reuse Ant Design dropdown styles\nconst FilterContainer = styled.div`\n  width: 20rem;\n  padding: 0.5rem 1rem;\n  background: white;\n  border-radius: 2px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n`;\n\n/**\n * Render items in a table.\n *\n * TODO Add pagination to Redux store.\n * TODO Implement onChange as per https://ant.design/components/table/#components-table-demo-ajax .\n * TODO Move sorting logic to Redux store and selectors.\n * TODO Move sellIn filtering logic to Redux store and selectors.\n * TODO Move type filtering logic to Redux store and selectors.\n *\n * @param {Object} props - React component properties.\n * @property {module:sagas/item.Item[]} items - Items to render.\n * @property {boolean} loading - Whether items are being loaded.\n * @property {string} nameSearch - Name search query.\n * @property {number} qualityMin - Minimum quality (Default: `0`).\n * @property {number} qualityMax - Minimum quality (Default: `100`).\n * @returns {React.Element} The rendered element.\n */\nconst Items = ({\n  items,\n  loading,\n  emptyText,\n  nameSearch,\n  qualityMin,\n  qualityMax,\n}) => (\n  <Table\n    dataSource={items}\n    loading={loading}\n    locale={{ emptyText }}\n    pagination={false}\n    rowKey=\"id\"\n  >\n    <Column\n      title={<ConnectedNameSearch />}\n      key=\"name\"\n      dataIndex=\"name\"\n      render={text => (\n        <Highlighter\n          searchWords={[nameSearch]}\n          textToHighlight={text}\n          highlightTag={({ children }) => <Highlight>{children}</Highlight>}\n          autoEscape\n        />\n      )}\n      sorter={(a, b) => a.name.localeCompare(b.name)}\n    />\n    <Column\n      title=\"Price\"\n      key=\"sellIn\"\n      dataIndex=\"sellIn\"\n      align=\"right\"\n      render={(sellIn, { sellInTrend }) => (\n        <>\n          <Price value={sellIn} />\n          <Trend value={sellInTrend} style={{ marginLeft: '0.5rem' }} />\n        </>\n      )}\n      sorter={(a, b) => a.sellIn - b.sellIn}\n      filters={sellInFilters.map(([min, max]) => ({\n        value: `${min}:${max}`,\n        text: max === +Infinity ? `Higher than ${min}` : `${min} to ${max}`,\n      }))}\n      onFilter={(value, { sellIn }) => {\n        const [min, max] = value.split(':');\n        return sellIn >= min && sellIn <= max;\n      }}\n    />\n    <Column\n      title=\"Quality\"\n      key=\"quality\"\n      dataIndex=\"quality\"\n      align=\"right\"\n      render={(quality, { qualityTrend }) => (\n        <>\n          <Progress\n            type=\"circle\"\n            percent={(100 * (quality - qualityMin)) / qualityMax}\n            format={() => quality}\n            width={progressWidth}\n          />\n          <Trend value={qualityTrend} style={{ marginLeft: '0.5rem' }} />\n        </>\n      )}\n      sorter={(a, b) => a.quality - b.quality}\n      filterDropdown={() => (\n        <FilterContainer>\n          <ConnectedQualityFilter />\n        </FilterContainer>\n      )}\n    />\n    <Column\n      title=\"Type\"\n      key=\"type\"\n      dataIndex=\"type\"\n      align=\"center\"\n      render={type => (\n        <span style={{ color: typeColors[type] }}>{typeLabels[type]}</span>\n      )}\n      sorter={(a, b) => types.indexOf(a.type) - types.indexOf(b.type)}\n      filters={Object.entries(typeLabels).map(([value, text]) => ({\n        value,\n        text,\n      }))}\n      onFilter={(value, { type }) => type === value}\n    />\n  </Table>\n);\n\nItems.propTypes = {\n  items: arrayOf(\n    shape({\n      id: string.isRequired,\n      name: string.isRequired,\n      sellIn: number.isRequired,\n      quality: number.isRequired,\n      type: string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  loading: bool.isRequired,\n  emptyText: string.isRequired,\n  nameSearch: string.isRequired,\n  qualityMin: number.isRequired,\n  qualityMax: number.isRequired,\n};\n\n/**\n * Map Redux state to <Items> properties.\n *\n * @param {module:sagas/item.Item[]} state - Redux state.\n * @returns {Object} Properties for <Items> component.\n */\nconst mapStateToProps = state => ({\n  items: getVisibleItems(state),\n  loading: state.fetchingItems && !state.fetchedItemsOnce,\n  emptyText: state.fetchItemsError\n    ? 'An error occurred while retrieving the items list.'\n    : 'No items for sale.',\n  nameSearch: state.nameSearch,\n  qualityMin: state.qualityMin,\n  qualityMax: state.qualityMax,\n});\n\nexport default connect(mapStateToProps)(Items);\n","import React from 'react';\nimport { string, number, arrayOf, shape } from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport {\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Scatter,\n  ScatterChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { getVisibleItems } from '../selectors/item';\nimport { typeColors, typeLabels } from './config';\n\nconst ChartContainerOuter = styled.div`\n  margin-top: 4rem;\n  width: 100%;\n  height: 0;\n  padding-top: ${100 / (3 / 2)}%;\n  position: relative;\n`;\n\nconst ChartContainerInner = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\n/**\n * Items chart.\n *\n * @param {Object} props - React component properties.\n * @property {module:sagas/item.Item[]} items - Items to render.\n * @returns {React.Element} The rendered element.\n */\nconst ItemsChart = ({ items }) => {\n  /* eslint-disable no-param-reassign, fp/no-mutating-methods */\n  const itemsData = items.reduce((data, { type, name, sellIn, quality }) => {\n    if (type === 'LEGENDARY') {\n      return data;\n    }\n    if (!data[type]) {\n      data[type] = {\n        name: typeLabels[type] || 'Unknown',\n        data: [],\n        fill: typeColors[type] || typeColors.STANDARD,\n      };\n    }\n    data[type].data.push({ x: quality, y: sellIn, name });\n    return data;\n  }, {});\n  /* eslint-enable no-param-reassign, fp/no-mutating-methods */\n\n  return (\n    <ChartContainerOuter>\n      <ChartContainerInner>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <ScatterChart minWidth={100} minHeight={75}>\n            <YAxis type=\"number\" dataKey=\"x\" name=\"Quality\" unit=\"%\" />\n            <XAxis type=\"number\" dataKey=\"y\" name=\"Price\" unit=\"$\" />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n            <Legend />\n            {Object.entries(itemsData).map(([type, props]) => (\n              <Scatter key={type} {...props} />\n            ))}\n          </ScatterChart>\n        </ResponsiveContainer>\n      </ChartContainerInner>\n    </ChartContainerOuter>\n  );\n};\n\nexport { ItemsChart };\n\nItemsChart.propTypes = {\n  items: arrayOf(\n    shape({\n      id: string.isRequired,\n      name: string.isRequired,\n      sellIn: number.isRequired,\n      quality: number.isRequired,\n      type: string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\n/**\n * Map Redux state to <ItemsChart> properties.\n *\n * @param {module:sagas/item.Item[]} state - Redux state.\n * @returns {Object} Properties for <ItemsChart> component.\n */\nconst mapStateToProps = state => ({\n  items: getVisibleItems(state),\n});\n\nexport default connect(mapStateToProps)(ItemsChart);\n","import React from 'react';\nimport { Icon } from 'antd';\nimport styled from 'styled-components';\nimport ExternalLink from './ExternalLink';\nimport Items from './Items';\nimport ConnectedItemsChart from './ItemsChart';\n\nconst authorLink = (\n  <ExternalLink href=\"https://github.com/amercier\">Alex Mercier</ExternalLink>\n);\n\nconst employerLink = (\n  <ExternalLink href=\"https://brennus-analytics.com/\">\n    Brennus Analytics\n  </ExternalLink>\n);\n\nconst Layout = styled.div`\n  box-sizing: border-box;\n  background: #e9e9e9;\n  min-height: 100vh;\n`;\n\nconst containerStyles = `\n  width: 100%;\n  max-width: 60rem;\n  margin: 0 auto;\n`;\n\nconst innerSpacing = '4rem';\n\nconst rubbonHeight = '4rem';\n\nconst rubbonStyles = `\n  height: ${rubbonHeight};\n  line-height: ${rubbonHeight};\n`;\n\nconst Header = styled.div`\n  height: ${rubbonHeight};\n  line-height: ${rubbonHeight};\n  background: #001529;\n  color: #fff;\n`;\n\nconst HeaderContent = styled.div`\n  ${containerStyles}\n  ${rubbonStyles}\n  padding: 0 ${innerSpacing};\n`;\n\nconst Content = styled.div`\n  ${containerStyles}\n  padding: ${innerSpacing};\n  box-sizing: border-box;\n  min-height: calc(100vh - 2 * ${rubbonHeight});\n  background: #fff;\n`;\n\nconst Footer = styled.div`\n  ${rubbonStyles}\n  text-align: center;\n`;\n\n/**\n * Root application component.\n *\n * @returns {React.Element} The rendered element.\n */\nconst App = () => (\n  <Layout>\n    <Header>\n      <HeaderContent>\n        <Icon type=\"home\" /> Gilded Rose Inn - Administration\n      </HeaderContent>\n    </Header>\n    <Content>\n      <Items />\n      <ConnectedItemsChart />\n    </Content>\n    <Footer>\n      Created by {authorLink} for {employerLink}.\n    </Footer>\n  </Layout>\n);\n\nexport default App;\n","import {\n  ITEMS_FETCH,\n  ITEMS_FETCH_ERROR,\n  ITEMS_SET,\n  ITEMS_NAME_SEARCH,\n  ITEMS_QUALITY_FILTER,\n} from '../constants/actionTypes';\n\nconst INITIAL_STATE = {\n  items: [],\n  fetchingItems: false,\n  fetchedItemsOnce: false,\n  fetchItemsError: null,\n  nameSearch: '',\n  qualityMin: 0,\n  qualityMax: 100,\n  qualityRangeStart: 0,\n  qualityRangeEnd: 100,\n};\n\n/**\n * Item reducer.\n *\n * @param {Object} [state=INITIAL_STATE] - Previous state.\n * @param {string} action - Action type and data.\n * @returns {Object} Next state.\n */\nexport default function itemReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case ITEMS_FETCH: {\n      return { ...state, fetchingItems: true };\n    }\n    case ITEMS_FETCH_ERROR: {\n      // TODO Display a notification when the error occur while items exist.\n      // TODO Detect whether Internet connection is lost (normal behavior) vs server error.\n      return {\n        ...state,\n        fetchingItems: false,\n        fetchedItemsOnce: true,\n        fetchItemsError: action.error,\n      };\n    }\n    case ITEMS_SET: {\n      return {\n        ...state,\n        items: action.items,\n        fetchingItems: false,\n        fetchedItemsOnce: true,\n        fetchItemsError: null,\n      };\n    }\n    case ITEMS_NAME_SEARCH: {\n      return { ...state, nameSearch: action.query };\n    }\n    case ITEMS_QUALITY_FILTER: {\n      return {\n        ...state,\n        qualityRangeStart: action.rangeStart,\n        qualityRangeEnd: action.rangeEnd,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { NOTIFICATION } from '../constants/actionTypes';\n\n/**\n * Create an action to display a notification.\n *\n * @param {string} message - Notification main message.\n * @param {string} description - Notification description.\n * @returns {Object} An action that consists in adding the given items.\n */\nexport const doNotification = (message, description) => ({\n  type: NOTIFICATION,\n  message,\n  description,\n});\n","/**\n * Base API URL.\n *\n * Use `REACT_APP_API_URL` environment variable is defined, otherwise default to hardcoded value.\n * Note: variable must start with `REACT_APP_`. Read [Adding Custom Environment Variables] for more\n * information.\n *\n * [adding custom environment variables]: https://facebook.github.io/create-react-app/docs/adding-custom-environment-variables\n *\n * @type {string}\n */\nconst API_URL_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nexport const API_URL_ITEMS = `${API_URL_BASE}/items/`;\n","import { delay } from 'redux-saga';\nimport {\n  call,\n  put,\n  race,\n  take,\n  takeEvery,\n  select,\n  all,\n} from 'redux-saga/effects';\nimport { doFetchItems, doSetItems, doFetchItemError } from '../actions/item';\nimport { doNotification } from '../actions/notification';\nimport { API_URL_ITEMS } from '../constants/api';\nimport {\n  ITEMS_POLL_START,\n  ITEMS_POLL_STOP,\n  ITEMS_FETCH,\n} from '../constants/actionTypes';\n\n/**\n * @typedef Item\n *\n * Item.\n *\n * @type {Object}\n * @property {string} id - Item unique identifier.\n * @property {string} name - Item name.\n * @property {number} sellIn - Sell price.\n * @property {number} quality - Quality (between 0 and 100).\n * @property {string} type - Type of item: \"STANDARD\", \"CONJURED\", \"BACKSTAGE_PASS\" or \"LEGENDARY\".\n */\n\n/**\n * @typedef ChangingItem\n *\n * Item with trends over time.\n *\n * @type {Item}\n * @property {number} qualityTrend - Difference in quality during the last quality change.\n * @property {number} sellInTrend - Difference in sellIn during the last sellIn change.\n */\n\n/**\n * @typedef ItemSet\n *\n * Items as stored in Redux state: indexed by IDs.\n *\n * @type {Object<string, ChangingItem}\n */\n\n/**\n * Update items based on previous state.\n *\n * TODO Move this logic to the API.\n *\n * @param {ItemSet} prevItems - Previous items indexed by IDs.\n * @param {Item[]} items - New items set from the API.\n * @returns {Array} The new items indexed by IDs (ItemSet), and the number of added, removed and\n * udpated items (number).\n */\nexport function mergeItems(prevItems, items) {\n  return items.reduce(\n    ([nextItems, added, removed, updated], item) => {\n      const prevItem = prevItems[item.id];\n      const qualityTrend = prevItem && prevItem.quality - item.quality;\n      const sellInTrend = prevItem && prevItem.sellIn - item.sellIn;\n      return [\n        // Item set\n        {\n          ...nextItems,\n          [item.id]: {\n            ...item,\n            qualityTrend:\n              qualityTrend || (prevItem ? prevItem.qualityTrend : 0),\n            sellInTrend: sellInTrend || (prevItem ? prevItem.sellInTrend : 0),\n          },\n        },\n        // Counts\n        prevItem ? added : added + 1,\n        prevItem ? removed - 1 : removed,\n        qualityTrend || sellInTrend ? updated + 1 : updated,\n      ];\n    },\n    [{}, 0, Object.keys(prevItems).length, 0],\n  );\n}\n\n/**\n * Fetch items from the API.\n *\n * @returns {Promise<Item[]>} All items.\n */\nexport async function fetchItems() {\n  const response = await fetch(API_URL_ITEMS);\n  return response.json();\n}\n\n/**\n * Generate two effects:\n * 1. A call to fetchItems\n * 2. A new ITEMS_SET actions with the items returned by fetchItems.\n *\n * @returns {Object} An iterator that yields a call to fetchItems and a ITEMS_SET action.\n */\nexport function* handleFetchItems() {\n  try {\n    const items = yield call(fetchItems);\n    const [prevItems, fetchedItemsOnce] = yield select(state => [\n      state.items,\n      state.fetchedItemsOnce,\n    ]);\n    const [nextItems, added, removed, updated] = mergeItems(prevItems, items);\n    yield put(doSetItems(nextItems));\n\n    // Create a notification if items have been added, modified, or updated.\n    if (fetchedItemsOnce && (added || removed || updated)) {\n      yield put(\n        doNotification(\n          'Items have changed!',\n          `\n            ${added || 'No'} new item${added > 1 ? 's' : ''} have been added.\n            ${removed || 'No'} item${removed > 1 ? 's' : ''} have been removed.\n            ${updated || 'No'} item${updated > 1 ? 's' : ''} have been updated.\n          `,\n        ),\n      );\n    }\n  } catch (error) {\n    yield put(doFetchItemError(error));\n  }\n}\n\n/**\n * Generate the following effects infinitely:\n * 1. A new ITEMS_FETCH action.\n * 2. A call to wait() with the given delay.\n *\n * @param {number} ms - Time to wait before next poll, in ms.\n * @returns {Object} An iterator that yields infinitely a ITEMS_SET action and a call to wait.\n */\nexport function* handlePollItems(ms) {\n  /* eslint-disable redux-saga/no-unhandled-errors */\n  while (true) {\n    yield put(doFetchItems());\n    yield call(delay, ms);\n  }\n  /* eslint-enable redux-saga/no-unhandled-errors */\n}\n\n/**\n * Generate the following effects infinitely:\n * 1. A wait for the ITEMS_POLL_START action.\n * 2. A race between a handlePollItems call and a wait for ITEMS_POLL_STOP. This means effects from\n *    handlePollItems will be treated infinitely, until a ITEMS_POLL_STOP action is received.\n *\n * @returns {Object} An iterator that yields infinitely a wait for ITEMS_POLL_START action and the\n * polling race.\n */\nfunction* watchPollItemsStart() {\n  /* eslint-disable redux-saga/no-unhandled-errors */\n  while (true) {\n    const action = yield take(ITEMS_POLL_START);\n    yield race([call(handlePollItems, action.delay), take(ITEMS_POLL_STOP)]);\n  }\n  /* eslint-enable redux-saga/no-unhandled-errors */\n}\n\n/**\n * Create the items poll start/stop saga.\n *\n * @returns {Object} An iterator that yields the items poll start/stop saga.\n */\nexport default function* itemsSaga() {\n  /* eslint-disable redux-saga/no-unhandled-errors */\n  yield all([takeEvery(ITEMS_FETCH, handleFetchItems), watchPollItemsStart()]);\n  /* eslint-enable redux-saga/no-unhandled-errors */\n}\n","import { call, takeEvery, all } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { NOTIFICATION } from '../constants/actionTypes';\n\n/**\n * Display a notification.\n *\n * @param {string} message - Notification header.\n * @param {string} description - Notification description.\n * @returns {undefined} Nothing.\n */\nexport function notify(message, description) {\n  notification.open({ message, description });\n}\n\n/**\n * Generate an effect that calls notify.\n *\n * @param {Object} data - Notification data.\n * @param {string} data.message - Notification header.\n * @param {string} data.description - Notification description.\n * @returns {Object} An iterator that yields a call to `notify`.\n */\nexport function* handleNotification({ message, description }) {\n  /* eslint-disable redux-saga/no-unhandled-errors */\n  yield call(notify, message, description);\n  /* eslint-enable redux-saga/no-unhandled-errors */\n}\n\n/**\n * Create the items poll start/stop saga.\n *\n * @returns {Object} An iterator that yields the items poll start/stop saga.\n */\nexport default function* notificationsSaga() {\n  /* eslint-disable redux-saga/no-unhandled-errors */\n  yield all([takeEvery(NOTIFICATION, handleNotification)]);\n  /* eslint-enable redux-saga/no-unhandled-errors */\n}\n","import { all } from 'redux-saga/effects';\nimport itemsSaga from './item';\nimport notificationsSaga from './notification';\n\n/**\n * Generate the root saga.\n *\n * @returns {Object} An iterable that yields the root saga.\n */\nexport default function* rootSaga() {\n  /* eslint-disable redux-saga/no-unhandled-errors */\n  yield all([itemsSaga(), notificationsSaga()]);\n  /* eslint-enable redux-saga/no-unhandled-errors */\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createDebounceMiddleware from 'redux-debounced';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport itemReducer from '../reducers/item';\nimport { doStartPollingItems } from '../actions/item';\nimport rootSaga from '../sagas';\n\nconst debounce = createDebounceMiddleware();\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  itemReducer,\n  undefined, // preloadedState - we don't need an initial state as we will run the root saga immediately\n  applyMiddleware(\n    ...(process.env.NODE_ENV === 'development'\n      ? [debounce, createLogger(), saga]\n      : [debounce, saga]),\n  ),\n);\n\n// Run the root saga (ie: start listening for actions)\nsaga.run(rootSaga);\n\n// Start items polling\nstore.dispatch(doStartPollingItems());\n\nexport default store;\n","/* eslint-disable no-console, more/no-then, require-jsdoc */\n// TODO Rewrite service worker registration\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n/* eslint-enable no-console, more/no-then, require-jsdoc */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}